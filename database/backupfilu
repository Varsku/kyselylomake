-------------- DAO JUDUI ------------------------
	public List<Option> findAllO() {
		/*String sql = "SELECT * FROM option_choice";
		RowMapper<Option> mapper = new QuestionRowMapper();
		List<Option> options = jdbcTemplate.query(sql, mapper);
		 */
		return null;
	}

	public List<Answer> findAllA() {
		String sql = "select topic_name, question_id, answer1, answer2, answer3, answer4, answer5 from answers";
		RowMapper<Answer> mapper = new AnswerRowMapper();
		List<Answer> answers = jdbcTemplate.query(sql, mapper);

		return answers;
		
	}
		
	public void saveq(Question q) {
		final String sql = "insert into question(survey_id, type_name, question) values(?,?,?)";
		
		final int survey_id = q.getSurvey_id();
		final String type_name = q.getType_name();
		final String question = q.getQuestion();
	
		
		KeyHolder idHolder = new GeneratedKeyHolder();
		
		jdbcTemplate.update(
				new PreparedStatementCreator() {
	    	        public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
	    	            PreparedStatement ps = connection.prepareStatement(sql, new String[] {"question_id"});
	    	            ps.setInt(1, survey_id);
	    	            ps.setString(2, type_name);
	    	            ps.setString(3, question);
	    	      
	    	           ;
	    	            return ps;
	    	        }
	    	    }, idHolder);
	    
	
	    q.setQuestion_id(idHolder.getKey().intValue());
		
	}

	public void savea(Answer a) {
		final String sql = "insert into answers(topic_name, question_id, answer1, answer2, answer3, answer4, answer5) values(?,?,?,?,?,?,?)";
		
		final String topic_name = a.getTopic_name();
		final int question_id = a.getQuestion_id();
		final String answer1 = a.getAnswer1();
		final String answer2 = a.getAnswer2();
		final String answer3 = a.getAnswer3();
		final String answer4 = a.getAnswer4();
		final String answer5 = a.getAnswer5();
		
		KeyHolder idHolder = new GeneratedKeyHolder();
		
		jdbcTemplate.update(
				new PreparedStatementCreator() {
	    	        public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
	    	            PreparedStatement ps = connection.prepareStatement(sql, new String[] {"answer_id"});
	    	            ps.setString(1, topic_name);
	    	            ps.setInt(2, question_id);
	    	            ps.setString(3, answer1);
	    	            ps.setString(4, answer2);
	    	            ps.setString(5, answer3);
	    	            ps.setString(6, answer4);
	    	            ps.setString(7, answer5);
	    	           ;
	    	            return ps;
	    	        }
	    	    }, idHolder);
	    
	
	    a.setId(idHolder.getKey().intValue());
	}
	-----------------------------------------------------------------------------------------------------------
	
	
	--------------------------------- CONTROLLER JUDUI --------------------------------------------------------
	
	@RequestMapping(value="ruokailua.json")
	public @ResponseBody List<Answer> getAnswers() {
	
		List<Answer> answers = dao.findAllA();
	
		return answers;
	}
	
	
	//SAVING ANSWERS
	@RequestMapping(value="ruokailu", method=RequestMethod.POST)
	public String create( @ModelAttribute(value="answers") AnswerImpl answers) {
		dao.savea(answers);
		return "thanksman";
	}
	
	
	/*
	//QUESTIONS FROM DATABASE
	@RequestMapping(value="ruokailu", method=RequestMethod.GET)
	public String getDetails(Model model){
		List<Question> questions = dao.findAllQ();
		model.addAttribute("questions", questions);
		return "forms/diningform";		
	}
	*/
	//CREATING FORM
	@RequestMapping(value="ruokailu", method=RequestMethod.GET)
	public String getCreateForm(Model model) {
		Answer emptyAnswer = new AnswerImpl();
		List<Question> questions = dao.findAllQ();
		model.addAttribute("questions", questions);
		model.addAttribute("answers", emptyAnswer);
		return "forms/diningform";
	}
	
	--------------------------------------------------------------------------------------------------
	
	QUESTION--DAO--SPRING--JBCBJUDUU
	
			//QuestionExtractor extractor = new QuestionExtractor();
		//List<Question> questions = jdbcTemplate.query(sql, extractor);
		
	--------------------------------------------------------------------------------------------------
	
	ANSWERCONTROLLERJUDUU
	
	
	/*@RequestMapping(value="vastaus", method = RequestMethod.POST)
	public Answer saveAnswer(@RequestBody Answer a) {
	
		Answer answer = dao.saveAnswer(a);
	
		return answer;
	}*/
	
	--------------------------------------------------------------------------------------------------
	
	"BACKUP SETTII" filusta forEach talteen
	
	<body>

	<div>
	<form:form method="post" modelAttribute ="answers">
	<c:forEach items="${questions}" var="questions">
	<p><c:out value="${questions.topic_name}" default="-----"/></p>
	<fieldset>
	<p><c:out value="${questions.question1}" default="-----"/></p>
	<form:label	path="answer1"></form:label><br/>
					<form:input path="answer1"/>
	<p><c:out value="${questions.question2}" default="-----"/></p>
	
	<p><c:out value="${questions.question3}" default="-----"/></p>
	
	<p><c:out value="${questions.question4}" default="-----"/></p>
	
	<p><c:out value="${questions.question5}" default="-----"/></p>
	<button type="submit">Lähetä vastaukset!</button>
	</fieldset>
	</c:forEach>
	</form:form>
	</div>
	
</body>


Answer emptyAnswer = new AnswerImpl();
	
	--------------------------------------------------------------------------------------------------
	
	
	
	--------------------------------------------------------------------------------------------------
	
	
	
	--------------------------------------------------------------------------------------------------
	
	
	
	--------------------------------------------------------------------------------------------------
	
	
	
	--------------------------------------------------------------------------------------------------
	
	
	
	--------------------------------------------------------------------------------------------------
	
	
	
	--------------------------------------------------------------------------------------------------
	
	
	
	--------------------------------------------------------------------------------------------------
	
	